
class Graph:
  def __init__(self): ...
  def add(self, s, e=None): ... 
  """
  If e is not None, converts to dict. 
  If s is [(start, end), ...], converts to dict. 
  If dict (i.e., {start1: {end1, end2, ...}, ...}), iterates through edges. 
  """
  def has_cycle(self) -> bool: ...
  def __iter__(self) -> Iterable: ...
  def __reversed__(self) -> "Graph": ...
  def __repr__(self) -> str: ...