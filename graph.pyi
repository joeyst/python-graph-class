
class Graph:
  def __init__(self): ...
  def add(self, s, e=None): ... 
  """
  If e is not None, converts to dict. 
  If s is [(start, end), ...], converts to dict. 
  If dict (i.e., {start1: {end1, end2, ...}, ...}), iterates through edges. 
  """
  def remove(self, s, e=None): ...
  """ Same rules as Graph.add, just removes instead of adds. """
  def copy(self) -> Graph: ...
  def has_cycle(self) -> bool: ...
  def keys(self) -> Iterable[StartIndex]: ...
  def values(self) -> Iterable[set[EndIndex]]: ...
  def items(self) -> Iterable[tuple[StartIndex, set[EndIndex]]]: ...
  def __iter__(self) -> Iterable[tuple[StartIndex, set[EndIndex]]]: ...
  def __reversed__(self) -> "Graph": ...
  def __eq__(self, other) -> bool: ...
  def __repr__(self) -> str: ...
  def __getitem__(self, item) -> set: ...
  def children(self, item) -> set: ...
  def parents(self, item) -> set: ...